<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bonk on Bonk Docs</title>
    <link>https://moontools-docs.github.io/bonk/</link>
    <description>Recent content in Bonk on Bonk Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2019 14:36:00 -0700</lastBuildDate>
    
	<atom:link href="https://moontools-docs.github.io/bonk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IShape2D</title>
      <link>https://moontools-docs.github.io/bonk/api/ishape2d/</link>
      <pubDate>Sun, 15 Sep 2019 11:06:50 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/api/ishape2d/</guid>
      <description>An IShape2D is an interface that, when implemented, allows for spatial hashing and the computation of Minkowski Differences.
Your IShape2D implementations should be structs for memory efficiency purposes.
Properties public AABB { get; } An axis-aligned bounding box for the shape. This is stored so we can efficiently transform the AABB when necessary.
Methods Vector2 Support(Vector2 direction, Transform2D transform) A method which implements a support function for use with a Minkowski Difference.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://moontools-docs.github.io/bonk/transform/overview/</link>
      <pubDate>Sat, 14 Sep 2019 23:08:31 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/transform/overview/</guid>
      <description>Bonk uses the Transform2D struct which is taken from the MoonTools.Core.Structs package. By extension it also uses the Position2D struct taken from the same package.
A Transform2D is basically a way to store information about an object&amp;rsquo;s location, rotation, and scale in 2-dimensional space. Transforms use matrix math to perform all of these operations at once, making them very fast.
For memory performance purposes, shapes are implemented as structs, meaning they are value types.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://moontools-docs.github.io/bonk/narrow_phase/overview/</link>
      <pubDate>Sat, 14 Sep 2019 22:11:27 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/narrow_phase/overview/</guid>
      <description>In the broad phase, we were looking for speed. Now, once we have obtained a list of potential collisions, we want to know if these shapes are actually colliding or not. We are looking for accuracy.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://moontools-docs.github.io/bonk/shapes/overview/</link>
      <pubDate>Sat, 14 Sep 2019 19:19:03 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/shapes/overview/</guid>
      <description>In Bonk, an IShape2D is defined by two methods.
1) A support function, which is a method that returns the farthest possible point in the shape in a given Vector2 direction. The shape vertices are transformed by a Transform2D.
2) A method for creating an axis-aligned bounding box from the shape that takes a Transform2D to transform the shape vertices.
Bonk provides you with tested implementations of four common 2D shapes, but you can implement these methods to create custom IShape2D structs.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://moontools-docs.github.io/bonk/broad_phase/overview/</link>
      <pubDate>Sat, 14 Sep 2019 18:36:07 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/broad_phase/overview/</guid>
      <description>Let&amp;rsquo;s say we have a room with 100 objects. How do we know if any of those 100 objects are touching one another?
The naive solution is to simply check each pair of objects and see if they are colliding.
Unfortunately, this will require 10000 comparisons.
In other words, this naive approach becomes extremely expensive as the number of collision objects grows.
The solution? Broad-phase collision detection.
The purpose of the broad-phase is to very quickly check if an object might be touching another object.</description>
    </item>
    
    <item>
      <title>AABB</title>
      <link>https://moontools-docs.github.io/bonk/api/aabb/</link>
      <pubDate>Tue, 31 Dec 2019 14:36:00 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/api/aabb/</guid>
      <description>AABB, or axis-aligned bounding box, is defined by a minimum point and a maximum point. It is used for broad-phase collision detection. It represents a rectangular outline of the shape so we can quickly insert shapes into a SpatialHash.
Properties public Vector2 Min { get; private set; } The minimum point of the AABB.
public Vector2 Max { get; private set; } The maximum point of the AABB.
Methods public static AABB FromVertices(IEnumerable vertices) Can be used to generate an AABB from an arbitrary collection of vertices.</description>
    </item>
    
    <item>
      <title>Point</title>
      <link>https://moontools-docs.github.io/bonk/shapes/point/</link>
      <pubDate>Sun, 01 Dec 2019 22:41:00 -0800</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/shapes/point/</guid>
      <description>To define a Point, pass either a Position2D struct or two integers.
var point = new Point(1, 2);  </description>
    </item>
    
    <item>
      <title>SpatialHash&lt;T&gt;</title>
      <link>https://moontools-docs.github.io/bonk/api/spatialhash/</link>
      <pubDate>Sun, 15 Sep 2019 11:28:40 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/api/spatialhash/</guid>
      <description>SpatialHash is used for broad-phase collision detection. It can quickly return a set of potential collisions of a transformed shape. SpatialHash takes an ID type that is used to avoid comparing certain shape-transforms.
Methods public SpatialHash(int cellSize) Constructor method. Takes an integer representing the width of a cell in the spatial hash.
The cell width must not be too large or too small. If the cell width is too small, then shape-transforms will occupy many cells, and the hash check will have to check all of those cells for potential collisions.</description>
    </item>
    
    <item>
      <title>Position2D</title>
      <link>https://moontools-docs.github.io/bonk/transform/position2d/</link>
      <pubDate>Sat, 14 Sep 2019 23:17:46 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/transform/position2d/</guid>
      <description>In 2D games, when it comes to rendering we are generally dealing with pixels. This presents us with certain challenges that don&amp;rsquo;t exist in 3D.
For example - what is half of a pixel? The pixel is the smallest possible unit in 2D rendering, so fractions of pixels don&amp;rsquo;t really exist.
This can present us with problems when it comes to game physics. If your character is at coordinates (2.5, 3.</description>
    </item>
    
    <item>
      <title>GJK2D</title>
      <link>https://moontools-docs.github.io/bonk/narrow_phase/gjk2d/</link>
      <pubDate>Sat, 14 Sep 2019 22:47:55 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/narrow_phase/gjk2d/</guid>
      <description>Bonk uses the Gilbert-Johnson-Keerthi, or GJK, algorithm to perform narrow phase collision detection.
To accurately check a collision, you must pass two sets of shapes and transforms to the GJK2D.TestCollision method. Remember that a transform operates on the vertices of a shape: it moves, rotates, and scales them in 2D space.
var circleA = new Circle(2); var transformA = new Transform2D(new Vector2(-1, -1)); var circleB = new Circle(2); var transformB = new Transform2D(new Vector2(1, 1)); var (result, simplex) = GJK2D.</description>
    </item>
    
    <item>
      <title>Line</title>
      <link>https://moontools-docs.github.io/bonk/shapes/line/</link>
      <pubDate>Sat, 14 Sep 2019 19:36:39 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/shapes/line/</guid>
      <description>To define a Line, give a start and end position.
var start = new Position2D(-1, 1); var end = new Position2D(1, 1); var line = new Line(start, end);  </description>
    </item>
    
    <item>
      <title>Spatial Hash</title>
      <link>https://moontools-docs.github.io/bonk/broad_phase/spatial_hash/</link>
      <pubDate>Sat, 14 Sep 2019 18:35:33 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/broad_phase/spatial_hash/</guid>
      <description>In spatial hashing, we place each object into one or more &amp;ldquo;buckets&amp;rdquo;. Think of a grid covering 2D space. When an object&amp;rsquo;s bounding box covers one of the cells in this grid, it is placed into that cell. Any two unique objects that occupy the same cell are determined to be potentially colliding.
In Bonk, a spatial hash is defined by its ID type and a cell width. The ID type is used to filter objects.</description>
    </item>
    
    <item>
      <title>GJK2D</title>
      <link>https://moontools-docs.github.io/bonk/api/gjk2d/</link>
      <pubDate>Sun, 15 Sep 2019 11:19:13 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/api/gjk2d/</guid>
      <description>GJK2D is a static class containing methods for narrow-phase collision detection.
Methods public static bool TestCollision(IShape2D shapeA, Transform2D transformA, IShape2D shapeB, Transform2D transformB) Tests if the two shape-transform pairs are overlapping.
Example:
var circleA = new Circle(2); var transformA = new Transform2D(new Vector2(-1, -1)); var circleB = new Circle(2); var transformB = new Transform2D(new Vector2(1, 1)); var result = GJK2D.TestCollision(circleA, transformA, circleB, transformB);  In this example, these transformed circles are indeed overlapping, so result will be true.</description>
    </item>
    
    <item>
      <title>Transform2D</title>
      <link>https://moontools-docs.github.io/bonk/transform/transform2d/</link>
      <pubDate>Sat, 14 Sep 2019 23:30:26 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/transform/transform2d/</guid>
      <description>To create a Transform2D, you must provide a Position2D or a Vector2 for translation (Vector2 is converted to Position2D internally), a float representing rotation in degrees, and a Vector2 representing scale.
var transform = new Transform2D(new Position2D(4, 1), 5f, new Vector2(3, 1));  The following section will describe how to use an IShape2D in conjunction with Transform2D to perform collision detection.</description>
    </item>
    
    <item>
      <title>EPA2D</title>
      <link>https://moontools-docs.github.io/bonk/narrow_phase/epa2d/</link>
      <pubDate>Sat, 14 Sep 2019 22:54:35 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/narrow_phase/epa2d/</guid>
      <description>If an overlap has occurred, often we wish to determine the penetration vector, which is the shortest possible vector by which one of the shapes could be moved in order for them to stop overlapping. For this purpose, Bonk implements the Expanding Polytope Algorithm.
To use this feature, you must pass the shapes and transforms as well as the simplex that is returned from the GJK2D.TestCollision method.
var squareA = new Rectangle(-1, -1, 1, 1); var transformA = Transform2D.</description>
    </item>
    
    <item>
      <title>Circle</title>
      <link>https://moontools-docs.github.io/bonk/shapes/circle/</link>
      <pubDate>Sat, 14 Sep 2019 19:46:44 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/shapes/circle/</guid>
      <description>To define a circle, give a radius.
var circle = new Circle(3);  </description>
    </item>
    
    <item>
      <title>EPA2D</title>
      <link>https://moontools-docs.github.io/bonk/api/epa2d/</link>
      <pubDate>Sun, 15 Sep 2019 11:23:43 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/api/epa2d/</guid>
      <description>EPA2D is a static class containing a single method for computing the penetration vector of two overlapping shapes.
Methods public static Vector2 Intersect(IShape2D shapeA, Transform2D Transform2DA, IShape2D shapeB, Transform2D Transform2DB, Simplex simplex) Given two sets of shapes and transforms and an initial simplex, computes a penetration vector. When motion along the penetration vector is applied, the shape-transforms are guaranteed to become separated.
Example:
var squareA = new Rectangle(-1, -1, 1, 1); var transformA = Transform2D.</description>
    </item>
    
    <item>
      <title>Rectangle</title>
      <link>https://moontools-docs.github.io/bonk/shapes/rectangle/</link>
      <pubDate>Sat, 14 Sep 2019 20:37:23 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/shapes/rectangle/</guid>
      <description>To define a rectangle, give a minimum X and Y and a maximum X and Y.
var minX = -1; var minY = -1; var maxX = 1; var maxY = 1; var rectangle = new Rectangle(minX, minY, maxX, maxY);  </description>
    </item>
    
    <item>
      <title>Polygon</title>
      <link>https://moontools-docs.github.io/bonk/shapes/polygon/</link>
      <pubDate>Sat, 14 Sep 2019 20:55:54 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/shapes/polygon/</guid>
      <description>To define a polygon, pass a variable number of Position2D structs representing the points of the polygon.
var polygon = new Polygon( new Position2D(-2, 0), new Position2D(0, 2), new Position2D(2, 0), );  This polygon, for example, is a triangle.
Be careful not to define a concave Polygon, as this will cause the results of collision detection to be incorrect. Support for concave polygons is planned for a future release.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://moontools-docs.github.io/bonk/getting_started/installation/</link>
      <pubDate>Sat, 14 Sep 2019 18:20:28 -0700</pubDate>
      
      <guid>https://moontools-docs.github.io/bonk/getting_started/installation/</guid>
      <description>The simplest way of using Bonk is by including it in your C# project as a NuGet package.
To include the latest version of Bonk in your project using the .NET CLI, use the following command:
dotnet add package MoonTools.Core.Bonk  If you are using the NuGet Package Manager, you may do:
PM&amp;gt; Install-Package MoonTools.Core.Bonk  Once you have done this, you may access Bonk functionality by including
using MoonTools.Core.Bonk;  in any C# file.</description>
    </item>
    
  </channel>
</rss>